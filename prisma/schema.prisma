// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    PLAYER
}

enum Status {
    ALIVE
    DEAD
}

model User {
    id       String  @id @default(cuid())
    name     String
    email    String
    password String
    image    String?

    role   UserRole @default(PLAYER)
    status Status   @default(ALIVE)

    killedBy String?

    accounts Account[]
    sessions Session[]

    kills       Kill[]
    numberKills Int    @default(0)

    bounties Bounty[]

    targetPairing TargetPairing?
    targetId      String?

    @@unique([id, email])
    @@unique([id, name])
}

model Kill {
    id String @id @default(cuid())

    User     User   @relation(fields: [userId, userName], references: [id, name])
    userId   String
    userName String

    targetId   String
    targetName String?

    time DateTime @default(now())
}

model TargetPairing {
    id String @id @default(cuid())

    User   User   @relation(fields: [userId], references: [id])
    userId String @unique

    targetId String?

    TargetList   TargetList @relation(fields: [targetListId], references: [id])
    targetListId String

    complete Boolean @default(false)
}

model TargetList {
    id String @id @default(cuid())

    pairings TargetPairing[]
}

model CountdownDate {
    id String @id @default(cuid())

    date DateTime
}

model Bounty {
    id String @id @default(cuid())

    User   User   @relation(fields: [userId], references: [id])
    userId String 

    amount Float

    creatorName String

    created DateTime @default(now())

    confirmed Boolean @default(false)
    completed Boolean @default(false)
}
